#! Copyright 2018-2021 VMware, Inc.
#! SPDX-License-Identifier: Apache-2.0

#@ load("@ytt:template", "template")

---

#@ def resource_container_image(name, tag):
name: #@ name + "-image-" + tag
type: registry-image
source:
  tag: #@ tag
  repository: #@ "projects.registry.vmware.com/splinterdb/" + name
  username: ((distribution-harbor-robot-username))
  password: ((distribution-harbor-robot-password))
#@ end

---

#! Build and push a container image
#@ def job_recreate_image(resource_name):
name: #@ "recreate-" + resource_name
public: true
plan:
- get: #@ resource_name + "-source"
  trigger: true
- load_var: git-commit-sha
  file: #@ resource_name + "-source/.git/ref"
  reveal: true
- task: create-image
  privileged: true
  params:
    LABEL_git_sha: ((.:git-commit-sha))
  config:
    platform: linux
    image_resource:
      type: registry-image
      source:
        repository: harbor-repo.vmware.com/dockerhub-proxy-cache/concourse/oci-build-task
    inputs:
    - name: #@ resource_name + "-source"
      path: .
    outputs:
    - name: image
    params:
      BUILD_ARG_base_image: harbor-repo.vmware.com/dockerhub-proxy-cache/library/ubuntu:20.04
      DOCKERFILE: #@ "Dockerfile." + resource_name
      LABEL_created_by: "SplinterDB Concourse CI"
    run:
      path: build
- put: #@ resource_name + "-image-latest"
  params:
    image: image/image.tar
    additional_tags: #@ resource_name + "-source/.git/ref"
#@ end

---

#! Source code
#@ def resource_splinterdb_git_repo(name, branch, extra_config={}):
name: #@ name
type: git
source:
  uri: git@github.com:vmware/splinterdb.git
  branch: #@ branch
  private_key: ((github-bot-ssh-private-key))
  #@ if extra_config:
  _: #@ template.replace(extra_config)
  #@ end
#@ end

---

#@ def set_commit_status(status, context=""):
put: github-commit-status
inputs: [branch-main]
params:
  state: #@ status
  #@ if context:
  context: #@ context
  #@ end
#@ end

---

#@ def step_build_splinterdb_image(source, compiler, git_sha=False):
task: build
privileged: true
#@ if git_sha:
params:
  LABEL_git_sha: ((.:git-commit-sha))
#@ end
config:
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: harbor-repo.vmware.com/dockerhub-proxy-cache/concourse/oci-build-task
  inputs:
  - name: build-env-image-latest
  - name: run-env-image-latest
  - name: #@ source
    path: splinterdb-src
  outputs:
  - name: image
  params:
    IMAGE_ARG_build_env_image: build-env-image-latest/image.tar
    IMAGE_ARG_run_env_image: run-env-image-latest/image.tar
    BUILD_ARG_compiler: #@ compiler
    LABEL_compiler: #@ compiler
    LABEL_source: #@ source
    LABEL_created_by: "SplinterDB Concourse CI"
    CONTEXT: splinterdb-src
    UNPACK_ROOTFS: true
  run:
    path: build
#@ end

---

#@ def step_test_with_image():
task: test
image: image
config:
  platform: linux
  run:
    path: sh
    args: ["-c", "cd /splinterdb && ./test.sh"]
#@ end

---
#@ def step_collect_tags(compiler):
task: collect-tags
config:
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: harbor-repo.vmware.com/dockerhub-proxy-cache/library/busybox
  inputs:
  - name: branch-main
    path: repo
  outputs:
  - name: tags
  params:
    compiler: #@ compiler
  run:
    path: /bin/sh
    args: ['-euc', 'sed -e "s/^/$compiler-/" repo/.git/ref > tags/tags && cat tags/tags']
#@ end

---

#! Build, test and publish container images
#@ def job_main_build_test_push(compiler, also_latest=False):
name: #@ "main-build-test-" + compiler
public: true
on_success: #@ set_commit_status("success", compiler)
on_failure: #@ set_commit_status("failure", compiler)
on_error: #@ set_commit_status("error", compiler)
plan:
- in_parallel:
  - get: branch-main
    trigger: true
  - get: run-env-image-latest
    passed: [ recreate-run-env ]
    params: { format: oci }
    trigger: true
  - get: build-env-image-latest
    passed: [ recreate-build-env ]
    params: { format: oci }
    trigger: true
- load_var: git-commit-sha
  file: branch-main/.git/ref
  reveal: true
- #@ set_commit_status("pending", compiler)
- #@ step_build_splinterdb_image("branch-main", compiler, git_sha=True)
- #@ step_test_with_image()
- #@ step_collect_tags(compiler)
- put: #@ "splinterdb-image-" + compiler
  attempts: 2  #! allow 1 retry, since Distribution Harbor can be flaky
  params:
    image: image/image.tar
    additional_tags: tags/tags
#@ if also_latest:
- put: splinterdb-image-latest
  attempts: 2  #! allow 1 retry, since Distribution Harbor can be flaky
  params:
    image: image/image.tar
    additional_tags: branch-main/.git/ref
#@ end

#@ end

---

#@ def step_debug_build_test(compiler, input_name):
task: debug-build-test
image: build-env-image-latest
config:
  platform: linux
  inputs:
  - name: #@ input_name
  params:
    CC: #@ compiler
    LD: #@ compiler
  run:
    path: sh
    dir: #@ input_name
    args:
    - "-c"
    - "make debug && ./test.sh"
#@ end

---

#! Debug build and test
#@ def job_debug_main_build_test(compiler):
name: #@ "main-debug-build-test-" + compiler
public: true
on_success: #@ set_commit_status("success", compiler + "-debug")
on_failure: #@ set_commit_status("failure", compiler + "-debug")
on_error: #@ set_commit_status("error", compiler + "-debug")
plan:
- in_parallel:
  - get: branch-main
    trigger: true
  - get: build-env-image-latest
    passed: [ recreate-build-env ]
    trigger: true
- #@ set_commit_status("pending", compiler + "-debug")
- #@ step_debug_build_test(compiler, "branch-main")

#@ end

---

#@ def set_pr_status(context, status, description=""):
put: update-status
resource: github-pull-request
params:
  path: github-pull-request
  status: #@ status
  base_context: ci
  context: #@ context
  #@ if description:
  description: #@ status + ": " + description
  #@ end
get_params: {skip_download: true}
#@ end

---

#! Job to run against every PR
#@ def job_pr_check(job_name, steps, description=""):
name: #@ "pr-" + job_name
public: true
on_success: #@ set_pr_status(job_name, "success", description)
on_failure: #@ set_pr_status(job_name, "failure", description)
on_error: #@ set_pr_status(job_name, "error", description)
plan:
- get: github-pull-request
  trigger: true
  version: every
  params:
    list_changed_files: true
- #@ set_pr_status(job_name, "pending", description)
- #@ template.replace(steps)
#@ end

---

#! Build plan steps for various PR checks

#@ def steps_pr_build_test(compiler):
- in_parallel:
    fail_fast: true
    steps:
    - get: run-env-image-latest
      passed: [ recreate-run-env ]
      params: { format: oci }
    - get: build-env-image-latest
      passed: [ recreate-build-env ]
      params: { format: oci }
- #@ step_build_splinterdb_image("github-pull-request", compiler)
- #@ step_test_with_image()
#@ end

---

#@ def steps_pr_debug_build_test(compiler):
- get: build-env-image-latest
  passed: [ recreate-build-env ]
- #@ step_debug_build_test(compiler, "github-pull-request")
#@ end

---

#@ def steps_pr_clang_format():
- get: build-env-image-latest
  passed: [ recreate-build-env ]
- load_var: base_ref
  file: github-pull-request/.git/resource/base_sha
  reveal: true
- task: format-check
  image: build-env-image-latest
  config:
    platform: linux
    inputs:
    - name: github-pull-request
    run:
      dir: github-pull-request
      path: ./format-check.sh
      args: [ "((.:base_ref))" ]
#@ end

---

#@ def steps_pr_shell_scripts():
- get: build-env-image-latest
  passed: [ recreate-build-env ]
- task: check-shell-scripts
  image: build-env-image-latest
  config:
    platform: linux
    inputs:
    - name: github-pull-request
    run:
      path: "github-pull-request/ci/tasks/pr-check-shell-scripts.sh"
#@ end
