# Copyright 2018-2021 VMware, Inc.
# SPDX-License-Identifier: Apache-2.0

# Concourse CI pipeline
# https://concourse-ci.org/
#
# To install/update the pipeline, follow the Concourse docs to target a Concourse installation,
# then run
#    fly -t $TARGET set-pipeline --pipeline splinterdb --config ci/pipeline.yaml
---

resource_types:
# Enables GitHub status on commits
- name: cogito
  type: registry-image
  check_every: 12h
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/pix4d/cogito
    tag: "0.5.1"

# Enables GitHub status on pull requests
- name: pull-request
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/teliaoss/github-pr-resource


resources:
# Source code for the container image holding the build environment
- name: build-env-source
  type: git
  source:
    uri: git@github.com:vmware/splinterdb.git
    branch: main
    private_key: ((github-bot-ssh-private-key))
    paths: [ "Dockerfile.build-env" ]

# Source code for the container image holding the run environment
- name: run-env-source
  type: git
  source:
    uri: git@github.com:vmware/splinterdb.git
    branch: main
    private_key: ((github-bot-ssh-private-key))
    paths: [ "Dockerfile.run-env" ]

# Container images for the build environment
- name: build-env-image-latest
  type: registry-image
  source:
    tag: "latest"
    repository: projects.registry.vmware.com/splinterdb/build-env
    username: ((distribution-harbor-robot-username))
    password: ((distribution-harbor-robot-password))

- name: build-env-image-clang-12
  type: registry-image
  source:
    tag: "clang-12"
    repository: projects.registry.vmware.com/splinterdb/build-env
    username: ((distribution-harbor-robot-username))
    password: ((distribution-harbor-robot-password))

- name: build-env-image-gcc-9
  type: registry-image
  source:
    tag: "gcc-9"
    repository: projects.registry.vmware.com/splinterdb/build-env
    username: ((distribution-harbor-robot-username))
    password: ((distribution-harbor-robot-password))

# Container image for the runtime dependencies
- name: run-env-image
  type: registry-image
  source:
    tag: "latest"
    repository: projects.registry.vmware.com/splinterdb/run-env
    username: ((distribution-harbor-robot-username))
    password: ((distribution-harbor-robot-password))

# Container image with the final built splinterdb SO file and test binary
- name: splinterdb-image-clang-12
  type: registry-image
  source:
    tag: "clang-12"
    repository: projects.registry.vmware.com/splinterdb/splinterdb
    username: ((distribution-harbor-robot-username))
    password: ((distribution-harbor-robot-password))

- name: splinterdb-image-gcc-9
  type: registry-image
  source:
    tag: "gcc-9"
    repository: projects.registry.vmware.com/splinterdb/splinterdb
    username: ((distribution-harbor-robot-username))
    password: ((distribution-harbor-robot-password))

- name: splinterdb-image-latest
  type: registry-image
  source:
    tag: "latest"
    repository: projects.registry.vmware.com/splinterdb/splinterdb
    username: ((distribution-harbor-robot-username))
    password: ((distribution-harbor-robot-password))

# CI config, may be versioned separately from main branch
- name: ci-config
  type: git
  source:
    uri: git@github.com:vmware/splinterdb.git
    branch: ci-config
    private_key: ((github-bot-ssh-private-key))

# Source code repo, main branch
- name: branch-main
  type: git
  source:
    uri: git@github.com:vmware/splinterdb.git
    branch: main
    private_key: ((github-bot-ssh-private-key))
    ignore_paths: [ "ci" ]

- name: github-commit-status
  type: cogito
  check_every: 1h
  source:
    owner: vmware
    repo: splinterdb
    access_token: ((github-bot-access-token))

- name: github-pull-request
  type: pull-request
  check_every: 2m
  source:
    repository: vmware/splinterdb
    access_token: ((github-bot-access-token))
    base_branch: main


jobs:

# Create the container image that holds the build environment
- name: recreate-build-env
  public: true
  plan:
  - in_parallel:
    - get: ci-config
    - get: build-env-source
      trigger: true
  - in_parallel:
      fail_fast: true
      steps:
      - do:
        - task: create-build-env-image-clang-12
          privileged: true
          file: ci-config/ci/tasks/create-build-env-image.yaml
          vars: { compiler: clang-12 }
          output_mapping:
            image: image-clang-12
        - task: collect-tags-clang-12
          file: ci-config/ci/tasks/collect-tags.yaml
          vars: { compiler: clang-12 }
          input_mapping: { repo: build-env-source }
        - put: build-env-image-clang-12
          params:
            image: image-clang-12/image.tar
            additional_tags: tags/tags
      - do:
        - task: create-build-env-image-gcc-9
          privileged: true
          file: ci-config/ci/tasks/create-build-env-image.yaml
          vars: { compiler: gcc-9 }
          output_mapping:
            image: image-gcc-9
        - task: collect-tags-gcc-9
          file: ci-config/ci/tasks/collect-tags.yaml
          vars: { compiler: gcc-9 }
          input_mapping: { repo: build-env-source }
        - put: build-env-image-gcc-9
          params:
            image: image-gcc-9/image.tar
            additional_tags: tags/tags
        - put: build-env-image-latest # latest will be gcc-9
          params:
            image: image-gcc-9/image.tar
            additional_tags: build-env-source/.git/ref

# Create the container image that holds the runtime environment
- name: recreate-run-env
  public: true
  plan:
  - in_parallel:
    - get: ci-config
    - get: run-env-source
      trigger: true
  - task: create-run-env-image
    privileged: true
    file: ci-config/ci/tasks/create-run-env-image.yaml
  - put: run-env-image
    params:
      image: image/image.tar
      additional_tags: run-env-source/.git/ref

- name: test-and-publish-main
  public: true
  on_success:
    put: github-commit-status
    inputs: [branch-main]
    params: {state: success}
  on_failure:
    put: github-commit-status
    inputs: [branch-main]
    params: {state: failure}
  on_error:
    put: github-commit-status
    inputs: [branch-main]
    params: {state: error}
  plan:
  - in_parallel:
    - get: ci-config
    - get: branch-main
      trigger: true
    - get: run-env-image
      passed: [ recreate-run-env ]
      params: { format: oci }
      trigger: true
  - load_var: git-commit-sha
    file: branch-main/.git/ref
    reveal: true
  - put: github-commit-status
    inputs: [branch-main]
    params: {state: pending}
  - in_parallel:
      fail_fast: true
      steps:
      - do:
        - get: build-env-image-clang-12
          passed: [ recreate-build-env ]
          params: { format: oci }
          trigger: true
        - task: build-splinterdb-image-clang-12
          privileged: true
          input_mapping:
            build-env-image: build-env-image-clang-12
            splinterdb-src: branch-main
          output_mapping:
            image: image-clang-12
          file: ci-config/ci/tasks/create-splinterdb-image.yaml
          params:
            LABEL_git_sha: ((.:git-commit-sha))
            LABEL_compiler: clang-12
        - task: test-splinterdb-image-clang-12
          privileged: true
          image: image-clang-12
          config:
            platform: linux
            run:
              path: sh
              args: ["-c", "cd /splinterdb && ./test.sh"]
        - task: collect-tags-clang-12
          file: ci-config/ci/tasks/collect-tags.yaml
          vars: { compiler: clang-12 }
          input_mapping: { repo: branch-main }
        - put: splinterdb-image-clang-12
          params:
            image: image-clang-12/image.tar
            additional_tags: tags/tags
      - do:
        - get: build-env-image-gcc-9
          passed: [ recreate-build-env ]
          params: { format: oci }
          trigger: true
        - task: build-splinterdb-image-gcc-9
          privileged: true
          input_mapping:
            build-env-image: build-env-image-gcc-9
            splinterdb-src: branch-main
          output_mapping:
            image: image-gcc-9
          file: ci-config/ci/tasks/create-splinterdb-image.yaml
          params:
            LABEL_git_sha: ((.:git-commit-sha))
            LABEL_compiler: gcc-9
        - task: test-splinterdb-image-gcc-9
          privileged: true
          image: image-gcc-9
          config:
            platform: linux
            run:
              path: sh
              args: ["-c", "cd /splinterdb && ./test.sh"]
        - task: collect-tags-gcc-9
          file: ci-config/ci/tasks/collect-tags.yaml
          vars: { compiler: gcc-9 }
          input_mapping: { repo: branch-main }
        - put: splinterdb-image-gcc-9
          params:
            image: image-gcc-9/image.tar
            additional_tags: tags/tags
        - put: splinterdb-image-latest
          params:
            image: image-gcc-9/image.tar
            additional_tags: branch-main/.git/ref

- name: check-pull-requests
  public: true
  on_failure:
    put: github-pull-request
    params:
      path: github-pull-request
      status: failure
  on_success:
    put: github-pull-request
    params:
      path: github-pull-request
      status: success
  on_error:
    put: github-pull-request
    params:
      path: github-pull-request
      status: error
  plan:
  - get: ci-config
  - get: github-pull-request
    trigger: true
    version: every
  - put: github-pull-request
    params:
      path: github-pull-request
      status: pending
  - get: run-env-image
    passed: [ recreate-run-env ]
    params: { format: oci }
  - in_parallel:
      fail_fast: true
      steps:
      - do:
        - get: build-env-image-clang-12
          passed: [ recreate-build-env ]
          params: { format: oci }
        - task: build-splinterdb-image
          privileged: true
          input_mapping:
            build-env-image: build-env-image-clang-12
            splinterdb-src: github-pull-request
          output_mapping:
            image: image-clang-12
          file: ci-config/ci/tasks/create-splinterdb-image.yaml
        - task: test-splinterdb-image
          privileged: true
          image: image-clang-12
          config:
            platform: linux
            run:
              path: sh
              args: ["-c", "cd /splinterdb && ./test.sh"]
      - do:
        - get: build-env-image-gcc-9
          passed: [ recreate-build-env ]
          params: { format: oci }
        - task: build-splinterdb-image
          privileged: true
          input_mapping:
            build-env-image: build-env-image-gcc-9
            splinterdb-src: github-pull-request
          output_mapping:
            image: image-gcc-9
          file: ci-config/ci/tasks/create-splinterdb-image.yaml
        - task: test-splinterdb-image
          privileged: true
          image: image-gcc-9
          config:
            platform: linux
            run:
              path: sh
              args: ["-c", "cd /splinterdb && ./test.sh"]
