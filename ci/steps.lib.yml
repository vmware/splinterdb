#! Copyright 2018-2021 VMware, Inc.
#! SPDX-License-Identifier: Apache-2.0


#@ def get_task_timeout(quick=False, sanitize="", test_nightly=False):
#@   if sanitize:
#@     return "6h"
#@   elif quick:
#@     return "10m"
#@   elif test_nightly:
#@     return "6h"
#@   else:
#@     return "2h"
#@   end
#@ end

#@ def step_build_splinterdb_image(source, compiler, git_sha=False):
task: build
timeout: #@ get_task_timeout()
privileged: true
#@ if git_sha:
params:
  LABEL_git_sha: ((.:git-commit-sha))
#@ end
config:
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: harbor-repo.vmware.com/dockerhub-proxy-cache/concourse/oci-build-task
  inputs:
  - name: build-env-image-latest
  - name: run-env-image-latest
  - name: #@ source
    path: splinterdb-src
  outputs:
  - name: image
  params:
    IMAGE_ARG_build_env_image: build-env-image-latest/image.tar
    IMAGE_ARG_run_env_image: run-env-image-latest/image.tar
    BUILD_ARG_compiler: #@ compiler
    LABEL_compiler: #@ compiler
    LABEL_source: #@ source
    LABEL_created_by: "SplinterDB Concourse CI"
    CONTEXT: splinterdb-src
    UNPACK_ROOTFS: true
  run:
    path: build
#@ end

---

#@ def step_test_with_image():
task: test
timeout: #@ get_task_timeout()
image: image
config:
  platform: linux
  run:
    path: sh
    args: ["-c", "cd /splinterdb && ./test.sh"]
  params:
    INCLUDE_SLOW_TESTS: "true"
#@ end

---
#@ def step_collect_tags(compiler):
task: collect-tags
timeout: #@ get_task_timeout()
config:
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: harbor-repo.vmware.com/dockerhub-proxy-cache/library/busybox
  inputs:
  - name: branch-main
    path: repo
  outputs:
  - name: tags
  params:
    compiler: #@ compiler
  run:
    path: /bin/sh
    args: ['-euc', 'sed -e "s/^/$compiler-/" repo/.git/ref > tags/tags && cat tags/tags']
#@ end

---

#@ def step_build_test(compiler, input_name, is_debug=True, quick=False, sanitize="", test_nightly=False):
#@ if is_debug:
task: debug-build-test
#@ else:
task: release-build-test
#@ end
timeout: #@ get_task_timeout(quick=quick, sanitize=sanitize, test_nightly=test_nightly)
image: build-env-image-latest
config:
  platform: linux
  inputs:
  - name: #@ input_name
  params:
    CC: #@ compiler
    LD: #@ compiler
    INCLUDE_SLOW_TESTS: #@ str(not quick).lower()
    RUN_NIGHTLY_TESTS: #@ str(test_nightly).lower()
    BUILD_VERBOSE: "1"
    VERBOSE: "1"

    #! Exercise 'make help' in quick tests mode, to ensure 'help' still works.
    #@ if quick:
    MAKE_HELP: help
    #@ else:
    MAKE_HELP: ""
    #@ end

    #@ if is_debug:
    BUILD_MODE: "debug"
    #@ end

    #@ if sanitize == "asan":
    BUILD_ASAN: "1"
    #! work around issue "LeakSanitizer has encountered a fatal error", may be kernel-dependent
    ASAN_OPTIONS: "detect_leaks=0"
    #@ elif sanitize == "msan":
    BUILD_MSAN: "1"
    #@ end

  run:
    path: sh
    dir: #@ input_name
    args:
    - "-c"
    - "make $MAKE_HELP all run-tests run-examples"
#@ end

---

#@ def step_set_pr_status(context, status, description=""):
put: update-status
resource: github-pull-request
params:
  path: github-pull-request
  status: #@ status
  base_context: ci
  context: #@ context
  #@ if description:
  description: #@ status + ": " + description
  #@ end
get_params: {skip_download: true}
#@ end

---

#@ def step_set_commit_status(status, context=""):
put: github-commit-status
inputs: [branch-main]
params:
  state: #@ status
  #@ if context:
  context: #@ context
  #@ end
#@ end

---
