#! Copyright 2018-2021 VMware, Inc.
#! SPDX-License-Identifier: Apache-2.0

#! A ytt template for our Concourse CI pipeline
#! - https://carvel.dev/ytt
#! - https://concourse-ci.org
#!
#! Use the apply-pipeline.sh script to deploy

#@ load("resources.lib.yml",
#@         "resource_container_image",
#@         "resource_splinterdb_git_repo",
#@ )

#@ load("sequences.lib.yml",
#@         "sequence_pr_build_test",
#@         "sequence_pr_debug_build_test",
#@         "sequence_pr_clang_format",
#@         "sequence_pr_shell_scripts",
#@ )

#@ load("jobs.lib.yml",
#@         "job_recreate_image",
#@         "job_main_build_test_push",
#@         "job_debug_main_build_test",
#@         "job_pr_check",
#@         "job_nightly_main_build_test",
#@ )
---

resource_types:
#! Enables GitHub status on commits
- name: cogito
  type: registry-image
  check_every: 12h
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/pix4d/cogito
    tag: "0.5.1"

#! Enables GitHub status on pull requests
- name: pull-request
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/teliaoss/github-pr-resource

resources:

#! Container images for the build environment
- #@ resource_container_image("build-env", "latest")

#! Container images for the run environment
- #@ resource_container_image("run-env", "latest")

#! Container image with the final built splinterdb SO file and test binary
- #@ resource_container_image("splinterdb", "clang")
- #@ resource_container_image("splinterdb", "gcc")
- #@ resource_container_image("splinterdb", "latest")

#! Source code for the container image holding the build environment
- #@ resource_splinterdb_git_repo("build-env-source", "main", { "paths": [ "Dockerfile.build-env" ] })

#! Source code for the container image holding the run environment
- #@ resource_splinterdb_git_repo("run-env-source", "main", { "paths": [ "Dockerfile.run-env" ] })

#! Source code repo, main branch
- #@ resource_splinterdb_git_repo("branch-main", "main", { "ignore_paths": [ "ci" ] })

#! Set status on individual commits in the github repo
- name: github-commit-status
  type: cogito
  check_every: 1h
  source:
    owner: vmware
    repo: splinterdb
    access_token: ((github-bot-access-token))

#! Discover pull requests and set status on them
- name: github-pull-request
  type: pull-request
  check_every: 2m
  source:
    repository: vmware/splinterdb
    access_token: ((github-bot-access-token))
    base_branch: main

#! Define nightly timer resource
#! Ref: https://concourse-ci.org/time-trigger-example.html
#! Ref: https://github.com/concourse/time-resource
- name: nightly-timer
  type: time
  source:
    start: 12:00 AM
    stop: 1:00 AM
    location: America/Los_Angeles

#! List of jobs
jobs:

#! Create the container image that holds the build environment
- #@ job_recreate_image("build-env")
- #@ job_recreate_image("run-env")

#! Build, test and publish container images
- #@ job_main_build_test_push("clang")
- #@ job_main_build_test_push("gcc", also_latest=True)

- #@ job_debug_main_build_test("clang")
- #@ job_debug_main_build_test("gcc")
- #@ job_nightly_main_build_test("gcc")

#! first stage of pipeline, runs a few quick jobs
#@ stage_one = ["pr-quick-check", "pr-clang-format", "pr-shell-scripts"]
- #@ job_pr_check("clang-format", sequence_pr_clang_format(), description="check C source formatting")
- #@ job_pr_check("shell-scripts", sequence_pr_shell_scripts(), description="lint and format any shell scripts")
- #@ job_pr_check("quick-check", sequence_pr_debug_build_test("clang", quick=True), description="build and run fast unit tests")

#! second stage of pipeline, only triggers if all of the first-stage passes
- #@ job_pr_check("clang", sequence_pr_build_test("clang"), depends_on=stage_one, description="build and test")
- #@ job_pr_check("gcc", sequence_pr_build_test("gcc"), depends_on=stage_one, description="build and test")

- #@ job_pr_check("debug-clang", sequence_pr_debug_build_test("clang"), depends_on=stage_one, description="debug build and test")
- #@ job_pr_check("debug-gcc", sequence_pr_debug_build_test("gcc"), depends_on=stage_one, description="debug build and test")

- #@ job_pr_check("asan", sequence_pr_debug_build_test("gcc", sanitize="asan"), depends_on=stage_one, description="address sanitizer")
- #@ job_pr_check("msan", sequence_pr_debug_build_test("clang", sanitize="msan"), depends_on=stage_one, description="memory sanitizer")

#! List of CI-groups of jobs
groups:
- name: main_branch
  jobs:
  - main-build-test-clang
  - main-build-test-gcc
  - main-debug-build-test-clang
  - main-debug-build-test-gcc
  - main-nightly-build-test-gcc

- name: pull_requests
  jobs:
  - pr-quick-check
  - pr-clang
  - pr-debug-clang
  - pr-gcc
  - pr-debug-gcc
  - pr-clang-format
  - pr-shell-scripts
  - pr-asan
  - pr-msan

- name: env_images
  jobs:
  - recreate-build-env
  - recreate-run-env
